using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using NCMB;

/// <summary>
/// フレンド機能使用時のテンプレートクラス
/// </summary>
[AddComponentMenu("NCMBUT/Custom Template/#CLASS_NAME#")]
public class #CLASS_NAME#:MonoBehaviour
{
	/// <summary>
	/// フレンドのコントローラクラスを代入する変数
	/// Inspector上で、HierarchyにあるNCMBUTFriendConnectionのプレハブをアタッチする
	/// </summary>
	public NCMBUTFriendConnection Connection;

#region Search Users Methods
	/// <summary>
	/// ユーザ検索を行うメソッド
	/// </summary>
	/// <param name="targetName">検索するユーザ名</param>
	private void getSearchUserList(string targetName)
	{
		Connection.GetSearchUserList(targetName, new ListCallback(setSearchUserList));
	}

	/// <summary>
	/// ユーザ検索の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="objList">ユーザ一覧</param>
	/// <param name="error">エラーの有無</param>
	private void setSearchUserList(List<NCMBObject> objList, NCMBException error)
	{
		
	}
#endregion

#region Send Friend Request Methods
	/// <summary>
	/// フレンド申請を送るメソッド
	/// </summary>
	/// <param name="target">申請するユーザ</param>
	private void sendFriendRequest(NCMBObject target)
	{
		Connection.SendFriendRequest(target, new ErrorCallBack(setSendFriendRequestError));
	}

	/// <summary>
	/// フレンド申請の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setSendFriendRequestError(NCMBException error)
	{
		
	}
#endregion

#region Accept Friend Request Methods
	/// <summary>
	/// フレンド申請の承認を行うメソッド
	/// </summary>
	/// <param name="target">承認するユーザ</param>
	private void acceptFriendRequest(NCMBObject target)
	{
		Connection.AcceptFriendRequest(target, new ErrorCallBack(setAcceptFriendRequestError));
	}

	/// <summary>
	/// フレンド申請の承認の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setAcceptFriendRequestError(NCMBException error)
	{
		
	}
#endregion

#region Decline Friend Request Methods
	/// <summary>
	/// フレンド申請の拒否を行うメソッド
	/// </summary>
	/// <param name="target">拒否するユーザ</param>
	private void declineFriendRequest(NCMBObject target)
	{
		Connection.DeclineFriendRequest(target, new ErrorCallBack(setDeclineFriendRequestError));
	}

	/// <summary>
	/// フレンド申請の拒否の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setDeclineFriendRequestError(NCMBException error)
	{
		
	}
#endregion

#region Friend Request Cancel Methods
	/// <summary>
	/// フレンド申請をキャンセルするメソッド
	/// </summary>
	/// <param name="target">キャンセルするフレンド申請</param>
	private void cancelFriendRequest(NCMBObject target)
	{
		Connection.CancelRequest(target, new ErrorCallBack(setCancelFriendRequestError));
	}
	
	/// <summary>
	/// フレンド申請のキャンセルの結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setCancelFriendRequestError(NCMBException error)
	{

	}
#endregion

#region Get Friend List Methods
	/// <summary>
	/// フレンド一覧を取得するメソッド
	/// </summary>
	private void getFriendList()
	{
		Connection.GetFriendList(new ListCallback(setFriendList));
	}

	/// <summary>
	/// フレンド一覧の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="objList">フレンド一覧</param>
	/// <param name="error">エラーの有無</param>
	private void setFriendList(List<NCMBObject> objList, NCMBException error)
	{
		
	}
#endregion

#region Remove Friend Methods
	/// <summary>
	/// フレンドの削除を行うメソッド
	/// </summary>
	/// <param name="friend">削除するユーザ</param>
	private void removeFriend(NCMBObject friend)
	{
		Connection.RemoveFriend(friend, new ErrorCallBack(setRemoveFriendError));
	}

	/// <summary>
	/// フレンドの削除の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setRemoveFriendError(NCMBException error)
	{
		
	}
#endregion

#region Get Message List Methods
	/// <summary>
	/// メッセージ一覧を取得するメソッド
	/// </summary>
	private void getMessageList()
	{
		Connection.GetMessageList(new ListCallback(setMessageList));
	}

	/// <summary>
	/// メッセージ一覧の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="objList">メッセージ一覧</param>
	/// <param name="error">エラーの有無</param>
	private void setMessageList(List<NCMBObject> objList, NCMBException error)
	{
		
	}
#endregion

#region Send Message Methods
	/// <summary>
	/// メッセージを送信するメソッド
	/// </summary>
	/// <param name="friend">メッセージを送るユーザ</param>
	/// <param name="message">メッセージ</param>
	private void sendMessage(NCMBUser friend, string message)
	{
		Connection.SendMessage(friend, message, new ErrorCallBack(setSendMessageError));
	}

	/// <summary>
	/// メッセージを送信した結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setSendMessageError(NCMBException error)
	{
		
	}
#endregion

#region Remove Message Methods
	/// <summary>
	/// メッセージを削除するメソッド
	/// </summary>
	/// <param name="target">削除するメッセージ</param>
	private void removeMessage(NCMBObject target)
	{
		Connection.RemoveMessage(target, new ErrorCallBack(setRemoveMessageError));
	}

	/// <summary>
	/// メッセージの削除の結果を受け取るメソッド
	/// エラーがnullだと成功
	/// </summary>
	/// <param name="error">エラーの有無</param>
	private void setRemoveMessageError(NCMBException error)
	{
		
	}
#endregion
}
